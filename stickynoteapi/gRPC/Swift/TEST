#!/bin/sh

#defining colors
BLACK="\033[0;30m"        # Black
RED="\033[0;31m"          # Red
GREEN="\033[0;32m"        # Green
YELLOW="\033[0;33m"       # Yellow
BLUE="\033[0;34m"         # Blue
MAGENTA="\033[0;35m"       # Purple
CYAN="\033[0;36m"         # Cyan
WHITE="\033[0;37m"        # White

# Reset
NC="\033[0m"       # Text Reset

echo "${RED} REMOVING PREVIOUS TEST RECORDS! ${NC}" # make this conditional.
rm -rf build/reports

# TODO: npm install xml2js check for this too.  npm install glob check for this too. install jq using brew install jq.

#check if xcpretty is installed, xchtmlreport and xcpretty-json-formatter is installed.
echo "${MAGENTA} Checking if 'xcpretty' gem is installed or nor, found the gem? ${NC}"
if ! gem list -i "^xcpretty$"; then 
    echo "${RED} 'xcpretty' not found, installing now! ${NC}"
    gem install xcpretty
fi

echo "${MAGENTA} Checking if 'xcpretty-json-formatter' gem is installed or nor, found the gem? ${NC}"
if ! gem list -i "^xcpretty-json-formatter$"; then 
    echo "${RED} 'xcpretty-json-formatter' not found, installing now! ${NC}"
    gem install xcpretty-json-formatter
fi

echo "${MAGENTA} Checking if brew package for 'xchtmlreport' is installed or not, found the package? ${NC}"
brew list xchtmlreport || brew install xchtmlreport


formula_installed() {
    [ "$(brew list --versions | grep "$1")" ]
    return $?
}
#check

action="test"; target=""; filename="all"; generatehtmlreport=false

for last; do true; done
count=${last:-1}

regex='^[0-9]+$' #check if last argument is a number, if not set it to 1.
if ! [[ $count =~ $regex ]] ; then
   count=1
fi

while (( "$#" )); do
   case "$1" in
      --rest)  
			target="RESTTests/RESTTests"
			filename="rest"
            ;;
      --grpc)     
			target="gRPCTests/gRPCTests"
			filename="grpc"
            ;;
      --socket) 
			echo "ERROR: Not yet setup"
            ;;
      --without-building) 
            action="test-without-building" 
            ;;
      --generate-html-report)
            generatehtmlreport=true
            ;;               
      *) 
   esac        
   shift
done

echo "${CYAN} **** Initiating: $action with target $target **** ${NC}"

perform_tests() {
	if [ "$target" = "" ]; then
  		xcodebuild "$action" \
      -scheme stickynotes \
      -workspace stickynotes.xcworkspace \
      -destination 'platform=iOS Simulator,name=iPhone 8' \
      -resultBundlePath "build/reports/results/TestResults_${i}/TestResults_$1" | XCPRETTY_JSON_FILE_OUTPUT=build/reports/"${filename}"/"errors_$1.json" xcpretty --report junit --output build/reports/"${filename}"/"${filename}_$1.xml"  #-f `xcpretty-json-formatter` # OS=13.3' TODO: add the device's OS picking logic.
  	else
  		xcodebuild "$action" \
  		-scheme stickynotes \
  		-workspace stickynotes.xcworkspace \
  		-destination 'platform=iOS Simulator,name=iPhone 8' \
  		-only-testing "$target" -resultBundlePath "build/reports/results/TestResults_${i}/TestResults_$1" | XCPRETTY_JSON_FILE_OUTPUT=build/reports/"${filename}"/"errors_$1.json" xcpretty --report junit --output build/reports/"${filename}"/"${filename}_$1.xml"  #-f `xcpretty-json-formatter` #--report html
	fi
}

for ((i=1; i<=count; i++));  #used C style loop as 'for i in {1..$count}' does not work, as the variable does not inflate in time!
  do 
    perform_tests $i;  #execute the tests 'count' nuber of times. 
    if [ "$generatehtmlreport" = true ] ; then #egenerate html reports if needed.
      xchtmlreport -r "build/reports/results/TestResults_${i}/TestResults_${i}"
    fi
done

#collate all data. The process of collating works in a simple way, convert XML to JSON and collate into one, and then to CSV. :)

echo "${CYAN} **** GENERATING COMBINED FINAL TEST REPORT **** ${NC}"

node ./node/generateJsonReport.js

# This step ensures that a csv is generated after the json is ready.
jq -r '.testsuites | .testsuite[] | .testcase[] | ."$" | [.classname, .name, .time] | @csv' "./build/reports/combinedReport.json" > "./build/reports/combinedReport.csv"

# Add the heading to column name
echo 'Target,Test,Time' | cat - "./build/reports/combinedReport.csv" > temp && mv temp "./build/reports/combinedReport.csv"

echo "${CYAN} **** A COMBINED FINAL TEST REPORT GENERATED SUCCESSFULLY **** ${NC}"
